// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
#[warn(single_use_lifetimes)]
mod imp {
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;

    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("packet_size_bpf")
            .map("packet_stats", false)
            .prog("xdp_pass");

        builder.build()
    }

    #[derive(Default)]
    pub struct PacketSizeSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> SkelBuilder<'a> for PacketSizeSkelBuilder {
        type Output = OpenPacketSizeSkel<'a>;
        fn open(mut self) -> libbpf_rs::Result<OpenPacketSizeSkel<'a>> {
            let mut skel_config = build_skel_config()?;
            let open_opts = self.obj_builder.opts(std::ptr::null());

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenPacketSizeSkel { obj, skel_config })
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenPacketSizeSkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenPacketSizeSkel { obj, skel_config })
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    pub struct OpenPacketSizeMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenPacketSizeMaps<'_> {
        pub fn packet_stats(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("packet_stats").unwrap()
        }
    }

    pub struct OpenPacketSizeMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenPacketSizeMapsMut<'_> {
        pub fn packet_stats(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("packet_stats").unwrap()
        }
    }

    pub struct OpenPacketSizeProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenPacketSizeProgs<'_> {
        pub fn xdp_pass(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("xdp_pass").unwrap()
        }
    }

    pub struct OpenPacketSizeProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenPacketSizeProgsMut<'_> {
        pub fn xdp_pass(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("xdp_pass").unwrap()
        }
    }

    pub struct OpenPacketSizeSkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenSkel for OpenPacketSizeSkel<'a> {
        type Output = PacketSizeSkel<'a>;
        fn load(mut self) -> libbpf_rs::Result<PacketSizeSkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(PacketSizeSkel {
                obj,
                skel_config: self.skel_config,
                links: PacketSizeLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            &self.obj
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            &mut self.obj
        }
    }
    impl OpenPacketSizeSkel<'_> {
        pub fn progs(&self) -> OpenPacketSizeProgs<'_> {
            OpenPacketSizeProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> OpenPacketSizeProgsMut<'_> {
            OpenPacketSizeProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenPacketSizeMaps<'_> {
            OpenPacketSizeMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenPacketSizeMapsMut<'_> {
            OpenPacketSizeMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    pub struct PacketSizeMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl PacketSizeMaps<'_> {
        pub fn packet_stats(&self) -> &libbpf_rs::Map {
            self.inner.map("packet_stats").unwrap()
        }
    }

    pub struct PacketSizeMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl PacketSizeMapsMut<'_> {
        pub fn packet_stats(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("packet_stats").unwrap()
        }
    }

    pub struct PacketSizeProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl PacketSizeProgs<'_> {
        pub fn xdp_pass(&self) -> &libbpf_rs::Program {
            self.inner.prog("xdp_pass").unwrap()
        }
    }

    pub struct PacketSizeProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl PacketSizeProgsMut<'_> {
        pub fn xdp_pass(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("xdp_pass").unwrap()
        }
    }

    #[derive(Default)]
    pub struct PacketSizeLinks {
        pub xdp_pass: Option<libbpf_rs::Link>,
    }

    pub struct PacketSizeSkel<'a> {
        pub obj: libbpf_rs::Object,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
        pub links: PacketSizeLinks,
    }

    unsafe impl Send for PacketSizeSkel<'_> {}
    unsafe impl Sync for PacketSizeSkel<'_> {}

    impl Skel for PacketSizeSkel<'_> {
        fn object(&self) -> &libbpf_rs::Object {
            &self.obj
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            &mut self.obj
        }

        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            self.links = PacketSizeLinks {
                xdp_pass: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
            };

            Ok(())
        }
    }
    impl PacketSizeSkel<'_> {
        pub fn progs(&self) -> PacketSizeProgs<'_> {
            PacketSizeProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> PacketSizeProgsMut<'_> {
            PacketSizeProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> PacketSizeMaps<'_> {
            PacketSizeMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> PacketSizeMapsMut<'_> {
            PacketSizeMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 9, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97, 98,
        0, 120, 100, 112, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0, 112,
        97, 99, 107, 101, 116, 95, 115, 105, 122, 101, 46, 98, 112, 102, 46, 99, 0, 76, 66, 66, 48,
        95, 50, 0, 76, 66, 66, 48, 95, 51, 0, 120, 100, 112, 95, 112, 97, 115, 115, 0, 112, 97, 99,
        107, 101, 116, 95, 115, 116, 97, 116, 115, 0, 95, 95, 108, 105, 99, 101, 110, 115, 101, 0,
        46, 114, 101, 108, 120, 100, 112, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 35, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 3, 0,
        144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 3, 0, 208, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0,
        0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0,
        0, 89, 0, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 97, 18, 0, 0,
        0, 0, 0, 0, 97, 22, 4, 0, 0, 0, 0, 0, 31, 38, 0, 0, 0, 0, 0, 0, 99, 106, 252, 255, 0, 0, 0,
        0, 133, 0, 0, 0, 14, 0, 0, 0, 119, 0, 0, 0, 32, 0, 0, 0, 99, 10, 248, 255, 0, 0, 0, 0, 191,
        162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 248, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 123, 10, 240, 255, 0, 0, 0, 0, 21, 0, 4, 0, 0, 0, 0,
        0, 103, 6, 0, 0, 32, 0, 0, 0, 199, 6, 0, 0, 32, 0, 0, 0, 219, 106, 240, 255, 0, 0, 0, 0, 5,
        0, 8, 0, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 248, 255, 255, 255, 191, 163,
        0, 0, 0, 0, 0, 0, 7, 3, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 183, 4, 0, 0, 1, 0, 0, 0, 133, 0, 0, 0, 2, 0, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0, 149,
        0, 0, 0, 0, 0, 0, 0, 71, 80, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        6, 0, 0, 0, 176, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 159, 235, 1, 0, 24, 0, 0, 0,
        0, 0, 0, 0, 236, 1, 0, 0, 236, 1, 0, 0, 188, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0,
        0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 4,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 31, 0, 0, 0,
        0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 11, 0, 0, 0, 44, 0, 0, 0, 0,
        0, 0, 8, 12, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 4, 0,
        0, 4, 32, 0, 0, 0, 69, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0,
        0, 86, 0, 0, 0, 7, 0, 0, 0, 128, 0, 0, 0, 90, 0, 0, 0, 10, 0, 0, 0, 192, 0, 0, 0, 96, 0, 0,
        0, 0, 0, 0, 14, 13, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 16, 0, 0, 0, 109, 0, 0, 0,
        6, 0, 0, 4, 24, 0, 0, 0, 116, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 8, 0, 0, 0,
        32, 0, 0, 0, 130, 0, 0, 0, 8, 0, 0, 0, 64, 0, 0, 0, 140, 0, 0, 0, 8, 0, 0, 0, 96, 0, 0, 0,
        156, 0, 0, 0, 8, 0, 0, 0, 128, 0, 0, 0, 171, 0, 0, 0, 8, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 13, 2, 0, 0, 0, 186, 0, 0, 0, 15, 0, 0, 0, 190, 0, 0, 0, 1, 0, 0, 12, 17, 0, 0, 0,
        199, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 19,
        0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 204, 0, 0, 0, 0, 0, 0, 14, 20, 0, 0, 0, 1, 0, 0, 0, 170,
        2, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 178, 2, 0, 0, 1, 0,
        0, 15, 32, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 105, 110, 116, 0, 95, 95, 65,
        82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0, 95, 95, 117, 51, 50, 0,
        117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0, 95, 95, 117, 54, 52, 0, 117,
        110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 32, 108, 111, 110, 103, 0, 116,
        121, 112, 101, 0, 109, 97, 120, 95, 101, 110, 116, 114, 105, 101, 115, 0, 107, 101, 121, 0,
        118, 97, 108, 117, 101, 0, 112, 97, 99, 107, 101, 116, 95, 115, 116, 97, 116, 115, 0, 120,
        100, 112, 95, 109, 100, 0, 100, 97, 116, 97, 0, 100, 97, 116, 97, 95, 101, 110, 100, 0,
        100, 97, 116, 97, 95, 109, 101, 116, 97, 0, 105, 110, 103, 114, 101, 115, 115, 95, 105,
        102, 105, 110, 100, 101, 120, 0, 114, 120, 95, 113, 117, 101, 117, 101, 95, 105, 110, 100,
        101, 120, 0, 101, 103, 114, 101, 115, 115, 95, 105, 102, 105, 110, 100, 101, 120, 0, 99,
        116, 120, 0, 120, 100, 112, 95, 112, 97, 115, 115, 0, 99, 104, 97, 114, 0, 95, 95, 108,
        105, 99, 101, 110, 115, 101, 0, 47, 104, 111, 109, 101, 47, 115, 105, 47, 68, 111, 99, 117,
        109, 101, 110, 116, 115, 47, 100, 101, 118, 45, 112, 114, 111, 106, 101, 99, 116, 115, 47,
        110, 101, 116, 45, 109, 111, 110, 105, 116, 111, 114, 47, 46, 47, 115, 114, 99, 47, 98,
        112, 102, 47, 112, 97, 99, 107, 101, 116, 95, 115, 105, 122, 101, 46, 98, 112, 102, 46, 99,
        0, 32, 32, 32, 32, 118, 111, 105, 100, 32, 42, 100, 97, 116, 97, 32, 61, 32, 40, 118, 111,
        105, 100, 32, 42, 41, 40, 108, 111, 110, 103, 41, 99, 116, 120, 45, 62, 100, 97, 116, 97,
        59, 0, 32, 32, 32, 32, 118, 111, 105, 100, 32, 42, 100, 97, 116, 97, 95, 101, 110, 100, 32,
        61, 32, 40, 118, 111, 105, 100, 32, 42, 41, 40, 108, 111, 110, 103, 41, 99, 116, 120, 45,
        62, 100, 97, 116, 97, 95, 101, 110, 100, 59, 0, 32, 32, 32, 32, 105, 110, 116, 32, 112,
        107, 116, 95, 115, 122, 32, 61, 32, 100, 97, 116, 97, 95, 101, 110, 100, 32, 45, 32, 100,
        97, 116, 97, 59, 0, 32, 32, 32, 32, 105, 110, 116, 32, 112, 105, 100, 32, 61, 32, 98, 112,
        102, 95, 103, 101, 116, 95, 99, 117, 114, 114, 101, 110, 116, 95, 112, 105, 100, 95, 116,
        103, 105, 100, 40, 41, 32, 62, 62, 32, 51, 50, 59, 0, 32, 32, 32, 32, 115, 116, 114, 117,
        99, 116, 32, 118, 97, 108, 117, 101, 32, 42, 118, 97, 108, 117, 101, 32, 61, 32, 98, 112,
        102, 95, 109, 97, 112, 95, 108, 111, 111, 107, 117, 112, 95, 101, 108, 101, 109, 40, 38,
        112, 97, 99, 107, 101, 116, 95, 115, 116, 97, 116, 115, 44, 32, 38, 112, 105, 100, 41, 59,
        0, 32, 32, 32, 32, 105, 102, 32, 40, 118, 97, 108, 117, 101, 41, 0, 32, 32, 32, 32, 32, 32,
        32, 32, 95, 95, 115, 121, 110, 99, 95, 102, 101, 116, 99, 104, 95, 97, 110, 100, 95, 97,
        100, 100, 40, 38, 118, 97, 108, 117, 101, 44, 32, 112, 107, 116, 95, 115, 122, 41, 59, 0,
        32, 32, 32, 32, 32, 32, 32, 32, 98, 112, 102, 95, 109, 97, 112, 95, 117, 112, 100, 97, 116,
        101, 95, 101, 108, 101, 109, 40, 38, 112, 97, 99, 107, 101, 116, 95, 115, 116, 97, 116,
        115, 44, 32, 38, 112, 105, 100, 44, 32, 38, 112, 107, 116, 95, 115, 122, 44, 32, 66, 80,
        70, 95, 78, 79, 69, 88, 73, 83, 84, 41, 59, 0, 32, 32, 32, 32, 114, 101, 116, 117, 114,
        110, 32, 88, 68, 80, 95, 80, 65, 83, 83, 59, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46,
        109, 97, 112, 115, 0, 120, 100, 112, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0,
        0, 20, 0, 0, 0, 12, 1, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 184, 2, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 18, 0, 0, 0, 16, 0, 0, 0, 184, 2, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
        30, 1, 0, 0, 37, 72, 0, 0, 8, 0, 0, 0, 214, 0, 0, 0, 72, 1, 0, 0, 41, 76, 0, 0, 16, 0, 0,
        0, 214, 0, 0, 0, 122, 1, 0, 0, 27, 80, 0, 0, 24, 0, 0, 0, 214, 0, 0, 0, 122, 1, 0, 0, 9,
        80, 0, 0, 32, 0, 0, 0, 214, 0, 0, 0, 156, 1, 0, 0, 15, 88, 0, 0, 40, 0, 0, 0, 214, 0, 0, 0,
        156, 1, 0, 0, 42, 88, 0, 0, 48, 0, 0, 0, 214, 0, 0, 0, 156, 1, 0, 0, 9, 88, 0, 0, 64, 0, 0,
        0, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 214, 0, 0, 0, 204, 1, 0, 0, 27, 96,
        0, 0, 96, 0, 0, 0, 214, 0, 0, 0, 204, 1, 0, 0, 19, 96, 0, 0, 104, 0, 0, 0, 214, 0, 0, 0,
        16, 2, 0, 0, 9, 104, 0, 0, 112, 0, 0, 0, 214, 0, 0, 0, 31, 2, 0, 0, 38, 112, 0, 0, 128, 0,
        0, 0, 214, 0, 0, 0, 31, 2, 0, 0, 9, 112, 0, 0, 152, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 176, 0, 0, 0, 214, 0, 0, 0, 77, 2, 0, 0, 9, 128, 0, 0, 208, 0, 0, 0, 214, 0, 0, 0,
        149, 2, 0, 0, 5, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0,
        0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 1, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0,
        0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 2, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 29, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 2, 0,
        0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 136, 2, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0,
        0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 168, 2, 0, 0, 0, 0, 0, 0, 192, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 7, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
